name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:
  
jobs:
  javascript-lint:
    name: JavaScript Linting
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install ESLint
        run: |
          npm install eslint @eslint/js globals

      - name: Run ESLint
        run: npx eslint .

  python-lint:
    name: Python Flake Linter
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Flake
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake
        run: flake8 .

  python-black:
    name: Python Black Formatting Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run Black Check
        run: black --check .

  python-isort:
    name: Python isort Check
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install isort
        run: |
          python -m pip install --upgrade pip
          pip install isort

      - name: Run isort
        run: isort --check-only --diff .


  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env: 
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: Run migrations
        env: 
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        working-directory: Plataforma_de_Vendas
        run: |
          python manage.py migrate

      - name: Run tests with coverage
        working-directory: Plataforma_de_Vendas 
        run: |
          pytest --cov=Accounts --cov=Products --cov=Orders --cov=Stores --cov-report=html

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: Plataforma_de_Vendas/htmlcov/
          if-no-files-found: error

    
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' 
    needs: [python-tests]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/project_files/Plataforma-De-Vendas/Plataforma_de_Vendas
            git pull origin main
            conda activate conda_env

            echo "Checking for migration conflicts..."
            MIGRATION_OUTPUT=$(python manage.py makemigrations --dry-run 2>&1)
            if echo "$MIGRATION_OUTPUT" | grep -q "conflicting"; then
              echo "Migration conflict detected. Merging migrations..."
              python manage.py makemigrations --merge
            else
              echo "No migration conflicts detected..."
            fi

            echo "Validating migration integrity..."
            python manage.py sqlmigrate Accounts 0001 > /dev/null
            if [ $? -ne 0 ]; then
              echo "Migration integrity check failed! Fix the migrations before deploying."
              exit 1
            fi
            
            echo "Applying migrations..."
            python manage.py migrate || { echo "Migration failed! Aborting deployment."; exit 1; }

            echo "Collecting static files..."
            python manage.py collectstatic --noinput || { echo "Static files collection failed!"; exit 1; }

            reload_server


    
      

    

